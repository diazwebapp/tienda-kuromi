---
import Layout from "../layouts/Layout.astro"
import { peluches } from "../data/juguetes"
import ProductCard1 from "../components/ProductCard1.astro"
import StyleGridContainer1 from "../components/StyleGridContainer1.astro"
import { createFullUrlWithSlug } from "../utils/slugCreator"
import WithSidebar from "../layouts/WithSidebar.astro"
import type { ProductCollectionSchema, ProductInCollection } from "../utils/schemas";
const title = "Peluches de Kuromi"
const description = "Adéntrate en el adorable y travieso mundo de Kuromi con nuestra exclusiva selección de peluches"
const canonical = createFullUrlWithSlug("peluches-de-kuromi")

let alturas = peluches.map(p=>p.caracteristicas.altura)
alturas = [...new Set(alturas)].sort((a,b)=>a-b)

let colores = peluches.map(p=>p.caracteristicas.color)
colores = [...new Set(colores)]


const minis = peluches.filter(p=> p.caracteristicas.altura < 15)
const normales = peluches.filter(p=> p.caracteristicas.altura >= 16 && p.caracteristicas.altura < 39)
const grandes = peluches.filter(p=> p.caracteristicas.altura >= 40 && p.caracteristicas.altura <= 59)
const gigantes = peluches.filter(p=> p.caracteristicas.altura >= 60)

const mochilaUrl = createFullUrlWithSlug("mochilas-bolsos-de-kuromi")


const productsCollection =peluches.map((m) => {
    let product:ProductInCollection = {
        "@type": "Product",
        name:m.nombre,
        image:m.imagen,
        url:m.refLink,
        offers:{
            "@type":"Offer",
            priceCurrency:"EUR",
            price:m.precio.toString(),
            availability:"https://schema.org/InStock"
        },
        brand:{
            "@type":"Brand",
            name:"Kuromi"
        },
        aggregateRating:{
            "@type":"AggregateRating",
            ratingValue:m.rating.toString(),
            reviewCount:m.ratingCount.toString() 
        } 
    }
    return product;
})


const schemaColection:ProductCollectionSchema={
    "@context":"https://schema.org",
    "@type":"ProductCollection",
    name:title,
    description:description,
    url:canonical,
    includesObject:productsCollection
}

const schemas = [
    schemaColection
]

---

<Layout title={title} description={description} canonical={canonical} schemas={schemas} filtro={true}>
    <WithSidebar>
        <aside>
            <form class="filtro" id="filter-box" >
                <fieldset>
                    <legend>Tamaños</legend>
                    {
                        alturas.map(t=><label><input type="radio" name="altura" value={t} /> {t} cm</label>)
                    }
                </fieldset>
                <fieldset>
                    <legend>Colores</legend>
                    {
                        colores.map(c=><label><input type="radio" name="color" value={c} /> {c} </label>)
                    }
                </fieldset>
            </form>
        </aside>
        <section>
            <h1>Peluches de Kuromi | Encuentra tu Compañero Ideal</h1>
            <p>
                Seguro te has preguntado ¿dónde comprar peluches de kuromi? En Kuromiland encontraras una exclusiva selección de peluches. <br/>

                Encuentra el tamaño perfecto para tu colección al mejor estilo kawai.
            </p>
            <div class="rsfilter">
                <div class="toolbar">
                    <b>Resultado:</b>
                    <button class="cta" id="btnReset" >
                        Quitar filtros
                    </button>
                </div>
                <div class="gridFilter"></div>
            </div>
            <h2>Empezamos con los peluches más Pequeños</h2>
            <p>
                La categoría mas tienda, aquí tienes los tamaños pequeños, so la versión más mini.
            </p>
            <StyleGridContainer1 widthCard="200px" >
                {
                    minis.map((p)=>(
                        <ProductCard1 
                        nombre={p.nombre} 
                        imagen={p.imagen} 
                        precio={p.precio} 
                        caracteristicas={p.caracteristicas} 
                        rating={p.rating}
                        ratingCount={p.ratingCount}
                        refLink={p.refLink}
                        tienda={p.tienda}
                        />
                    ))
                }
            </StyleGridContainer1>
        </section>

        <section>
            <h2>Continuamos con los de tamaño normal o medianos</h2>
            <p>
                Aqui tienes los tamaños mas comunes, utiles para cualquier detalle o decoración.
            </p>
            <StyleGridContainer1 widthCard="200px" >
                {
                    normales.map((p)=>(
                        <ProductCard1 
                        nombre={p.nombre} 
                        imagen={p.imagen} 
                        precio={p.precio} 
                        caracteristicas={p.caracteristicas} 
                        rating={p.rating}
                        ratingCount={p.ratingCount}
                        refLink={p.refLink}
                        tienda={p.tienda}
                        />
                    ))
                }
            </StyleGridContainer1>
        </section>
        <section>
            <h2>¿Un kuromi de peluche grande es Perfecto para Ti?</h2>
            <p>
                Si tu corazón anhela un compañero de tamaño impresionante, no busques más. Hemos reunido una colección especial de los Peluches de Kuromi más grandes para aquellos que desean una presencia inigualable. <br/>Para tener en casa o hacer un regalo, no solo es un juguete, es tu compañero ideal. Y si deseas tambien tenemos ese <a href={mochilaUrl} style="color:var(--secondary-color);" >bolso de peluche</a> especial.
            </p>
            <StyleGridContainer1>
                {
                    grandes.map((p)=>(
                        <ProductCard1 
                        nombre={p.nombre} 
                        imagen={p.imagen} 
                        precio={p.precio} 
                        caracteristicas={p.caracteristicas} 
                        rating={p.rating}
                        ratingCount={p.ratingCount}
                        refLink={p.refLink}
                        tienda={p.tienda}
                        />
                    ))
                }
            </StyleGridContainer1>
        </section>
        <section>
            <h2>¿Buscas un abrazo enorme? ¡un kuromi peluche gigante te lo dará!</h2>
            <p>
                Están diseñado para ofrecer la máxima ternura y un impacto visual que transformará cualquier espacio. Encuentra ese peluche Kuromi de tamaño extra grande que convertirá cada momento en un abrazo con amor gigante.
            </p>
            <StyleGridContainer1>
                {
                    gigantes.map((p)=>(
                        <ProductCard1 
                        nombre={p.nombre} 
                        imagen={p.imagen} 
                        precio={p.precio} 
                        caracteristicas={p.caracteristicas} 
                        rating={p.rating}
                        ratingCount={p.ratingCount}
                        refLink={p.refLink}
                        tienda={p.tienda}
                        />
                    ))
                }
            </StyleGridContainer1>
        </section>
    </WithSidebar>
</Layout>

<style>
    /**Estilos para gridFilter */
    .gridFilter{
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    }
    .toolbar{
        background-color: var(--secondary-color);
        justify-content: space-between;
        padding:10px 5px;
        align-items: center;
        border-radius: 12px;
        margin-bottom: 10px;
        display:flex;
        opacity: 0;
        transition: opacity .3s ease-in-out;
        &&button{
            border: none;
            display: inline;
            margin: unset;
            cursor: pointer;
        }
       
    }
    /** estilos del filtro */
    .filtro{
        padding: 8px 0;
        position: fixed;
        left: -90%;
        top:0;
        height: calc(100% - 63px);
        overflow: auto;
        background-color: rgba(0,0,0,.5);
        backdrop-filter: blur(5px);
        transition: left .5s ease-out;
        z-index:3;
        min-width:280px;
        padding:10px;
    }
    .filtro fieldset, .filtro fieldset legend{
            background-color: var(--secondary-color);
        }
    .filtro fieldset legend{
        padding: 3px 10px;
        border-radius: 7px 7px 0 0;
    }
    .filtro fieldset{
        border-radius: 7px;
        margin-bottom: 10px;
        padding: 10px;
        border:none;
    }
    .filtro fieldset label{
        display: block;
        border-bottom: 1px solid var(--shadow-color);
        padding: 10px 0;
        cursor: pointer;
    }
    .open-filter {
        left: 0;
    }
    @media (min-width: 916px) {
        
        .filtro{
            position: inherit;
            left: unset;
            width: 100%;
            min-width: unset;
            max-height: unset;
            background-color: transparent;
            padding: 0;
        }
        aside{
            grid-row-start: 1;
            grid-row-end: 8; 
        }
        section{
            grid-column-start: 2;
            grid-column-end: 3;
        }
    }
</style>

<script>
    const products:any[] = []
    const resetFilters = document.querySelector<HTMLButtonElement>('#resetFilters')
    const tamanos = document.querySelectorAll<HTMLInputElement>('input[name="altura"]')
    const colores = document.querySelectorAll<HTMLInputElement>('input[name="color"]')
    const articles = document.querySelectorAll<HTMLElement>('article.product-card')
    const containerFliler = document.querySelector<HTMLElement>('.gridFilter')
    const toolbar = document.querySelector<HTMLElement>('.toolbar')
    const btnReset = document.querySelector<HTMLButtonElement>('#btnReset')



    if(tamanos.length > 0){
        for(let t of tamanos){
            t.addEventListener('change',()=>{
                const product = buscarProductos(t.value)
                const exists = products.some(p=>p.textContent === product?.textContent)
                if(!exists){
                    products.push(product)
                    filterUI()
                }
            })
        }
    }
    if(colores.length > 0){
        for(let c of colores){
            c.addEventListener('change',()=>{
                const product = buscarProductos(null,c.value)
                const exists = products.some(p=>p.textContent === product?.textContent)
                if(!exists){
                    products.push(product)
                    filterUI()
                }
            })
        }
    }
    if(resetFilters){
        resetFilters.addEventListener('click',()=>{
            resetearFiltros()
        })
    }
    
    function buscarProductos(dimenciones?:string | null,colores?:string){
        for(let article of articles){
            const altura = article.querySelector("small.dimenciones")
            const color = article.querySelector("small.colores")
            if(altura || color){
                const a = altura?.textContent
                const c = color?.textContent
                if(a && dimenciones){
                    if(a.includes(dimenciones)){
                        const clone = article.cloneNode(true)
                        return clone
                    }
                }
                if(c && colores){
                    if(c.includes(colores)){
                        const clone = article.cloneNode(true)
                        return clone
                    }
                }
            }
        }
    }

    function resetearFiltros(){
        products.length = 0
    }

    function filterUI(reset:boolean = false){
        if(reset){
            products.length = 0
            if (containerFliler && toolbar){
                containerFliler.innerHTML = ''
                toolbar.style.opacity="0"
            }
            return
        }
       
        if (containerFliler){
            containerFliler.innerHTML = ''
            products.forEach(p=>{
                containerFliler.appendChild(p)
            })
        }
        if (toolbar && btnReset){
            btnReset.addEventListener('click',()=>{
                resetearFiltros()
                filterUI(true)
            })
            toolbar.style.opacity="1"
        } 

    }

        
</script>